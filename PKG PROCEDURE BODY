
create or replace PACKAGE BODY FIDE_CLINICA_DENTAL_PROCEDURES_PKG AS

    --ROLE

    PROCEDURE ROLE_INSERTAR_ROLE_SP(
    V_ID_ROLE IN NUMBER,
    V_NOMBRE_ROLE IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO FIDE_ROLE_TB(ID_ROLE, DESCRIPCION)
        VALUES (V_ID_ROLE, V_NOMBRE_ROLE);
    
    END;
    
    --ESTADO
    PROCEDURE ESTADO_INSERTAR_ESTADO_SP(
    V_ID_ESTADO IN VARCHAR2,
    V_NOMBRE_ESTADO IN VARCHAR2    
    ) AS
    BEGIN
        INSERT INTO FIDE_ESTADO_TB(ID_ESTADO, DESCRIPCION)
        VALUES(V_ID_ESTADO, V_NOMBRE_ESTADO);
    END;
    
    --USUARIO
PROCEDURE USUARIO_OBTENER_REGISTRO_SP(
    V_NOMBRE IN VARCHAR2,
    V_PRIMER_APELLIDO IN VARCHAR2,
    V_SEGUNDO_APELLIDO IN VARCHAR2,
    V_EMAIL IN VARCHAR2,
    V_TELEFONO IN NUMBER,
    V_CONTRASENA RAW 
) IS
    V_CUENTA_EMAIL NUMBER;
    V_CONTRASENA_HASH RAW(256); 
BEGIN
   
    IF V_NOMBRE IS NULL OR V_NOMBRE = ' ' THEN
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE ESTÁ VACÍO');
        RETURN;
    ELSIF V_PRIMER_APELLIDO IS NULL OR V_PRIMER_APELLIDO = ' ' THEN
        DBMS_OUTPUT.PUT_LINE('EL PRIMER APELLIDO ESTÁ VACÍO');
        RETURN;
    ELSIF V_SEGUNDO_APELLIDO IS NULL OR V_SEGUNDO_APELLIDO = ' ' THEN
        DBMS_OUTPUT.PUT_LINE('EL SEGUNDO APELLIDO ESTÁ VACÍO');
        RETURN;
    ELSIF V_EMAIL IS NULL OR V_EMAIL = ' ' THEN
        DBMS_OUTPUT.PUT_LINE('EL EMAIL ESTÁ VACÍO');
        RETURN;
    ELSIF V_EMAIL NOT LIKE '%@%' OR V_EMAIL NOT LIKE '%.%' THEN
        DBMS_OUTPUT.PUT_LINE('EL EMAIL NO CONTIENE @ O .');
        RETURN;
    ELSIF V_TELEFONO IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('EL TELÉFONO NO CONTIENE VALOR');
        RETURN;
    ELSIF V_CONTRASENA IS NULL OR V_CONTRASENA = ' ' THEN
        DBMS_OUTPUT.PUT_LINE('LA CONTRASEÑA ESTÁ VACÍA');
        RETURN;
    END IF;

  
    SELECT COUNT(*) INTO V_CUENTA_EMAIL
    FROM FIDE_USUARIO_TB
    WHERE EMAIL = V_EMAIL;

    IF V_CUENTA_EMAIL > 0 THEN
        DBMS_OUTPUT.PUT_LINE('EL CORREO ELECTRÓNICO YA ESTÁ REGISTRADO');
        RETURN;
    END IF;

    -- Encriptación de la contraseña (SHA-256)
    V_CONTRASENA_HASH := DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(V_CONTRASENA), DBMS_CRYPTO.HASH_SH256);

    
    INSERT INTO FIDE_USUARIO_TB
        (NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, EMAIL, TELEFONO, CREADO_POR, CONTRASEÑA)
    VALUES
        (V_NOMBRE, V_PRIMER_APELLIDO, V_SEGUNDO_APELLIDO, V_EMAIL, V_TELEFONO, V_NOMBRE, V_CONTRASENA_HASH);

    DBMS_OUTPUT.PUT_LINE('USUARIO REGISTRADO EXITOSAMENTE');
END;





PROCEDURE USUARIO_ASIGNAR_OTRO_ROLE_SP(
    V_ID_USUARIO IN NUMBER,     V_ID_ROLE NUMBER) 
    IS

BEGIN

    UPDATE FIDE_USUARIO_TB
    SET ID_ROLE = V_ID_ROLE
    WHERE ID_USUARIO = V_ID_USUARIO;

END;



PROCEDURE AGREGAR_PROVEEDORES_SP (
    V_NOMBRE_PROVEEDOR IN VARCHAR2, 
    V_EMAIL_PRO IN VARCHAR2,
    V_TELEFONO IN NUMBER,
    V_ID_DISTRITO IN NUMBER, 
    V_ID_CANTON IN NUMBER, 
    V_ID_PROVINCIA IN NUMBER
) IS
    V_CUENTA_EMAIL_PRO NUMBER;

BEGIN
    -- Validaciones de entrada
    IF V_NOMBRE_PROVEEDOR IS NULL OR TRIM(V_NOMBRE_PROVEEDOR) = '' THEN
        DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL PROVEEDOR ESTÁ VACÍO');
        RETURN;

    ELSIF V_EMAIL_PRO IS NULL OR TRIM(V_EMAIL_PRO) = '' THEN
        DBMS_OUTPUT.PUT_LINE('EL EMAIL ESTÁ VACÍO');
        RETURN;

     ELSIF V_EMAIL_PRO NOT LIKE '%@%' OR V_EMAIL_PRO NOT LIKE '%.%' THEN
        DBMS_OUTPUT.PUT_LINE('EL EMAIL NO TIENE UN FORMATO VÁLIDO');
        RETURN;

    ELSIF V_TELEFONO IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('EL TELÉFONO DEL PROVEEDOR ESTÁ VACÍO');
        RETURN;

    ELSIF V_ID_DISTRITO IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('EL DISTRITO NO HA SIDO ESPECIFICADO');
        RETURN;

    ELSIF V_ID_CANTON IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('EL CANTÓN NO HA SIDO ESPECIFICADO');
        RETURN;

    ELSIF V_ID_PROVINCIA IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('LA PROVINCIA NO HA SIDO ESPECIFICADA');
        RETURN;
    END IF;

   
    SELECT COUNT(*) INTO V_CUENTA_EMAIL_PRO
    FROM FIDE_PROVEEDORES_TB
    WHERE EMAIL = V_EMAIL_PRO;

    IF V_CUENTA_EMAIL_PRO > 0 THEN
        DBMS_OUTPUT.PUT_LINE('EL CORREO ELECTRÓNICO YA ESTÁ REGISTRADO');
        RETURN;
    END IF;


    INSERT INTO FIDE_PROVEEDORES_TB (
        NOMBRE_PROVEEDOR, EMAIL, TELEFONO, ID_DISTRITO, ID_CANTON, ID_PROVINCIA
    ) VALUES (
        V_NOMBRE_PROVEEDOR, V_EMAIL_PRO, V_TELEFONO, V_ID_DISTRITO, V_ID_CANTON, V_ID_PROVINCIA
    );

    DBMS_OUTPUT.PUT_LINE('PROVEEDOR REGISTRADO EXITOSAMENTE');
END;

PROCEDURE USUARIO_VALIDAR_USUARIO_SP (
    V_EMAIL IN VARCHAR2,
    V_CONTRASENA IN RAW,
    V_RESULTADO OUT NUMBER
) IS
    V_CONTRASENA_HASH RAW(256);
    V_CONTRASENA_ALMACENADA RAW(256);
BEGIN

    V_CONTRASENA_HASH := DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(V_CONTRASENA), DBMS_CRYPTO.HASH_SH256);

    -- Obtiene la contraseña almacenada en la base de datos
    SELECT CONTRASEÑA INTO V_CONTRASENA_ALMACENADA
    FROM FIDE_USUARIO_TB
    WHERE EMAIL = V_EMAIL;

    -- Compara las contraseñas encriptadas para ver si son iguales
    IF V_CONTRASENA_HASH = V_CONTRASENA_ALMACENADA THEN
        V_RESULTADO := 1;  -- Usuario autenticado
    ELSE
        V_RESULTADO := 0;  -- Contraseña incorrecta
    END IF;


END;






 --Editar Nombre--
    PROCEDURE USUARIO_EDITAR_NOMBRE_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_NOMBRE IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET NOMBRE = V_NOMBRE
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;
    
    --EDITAR PRIMER_APELLIDO--
    PROCEDURE USUARIO_EDITAR_PRIMER_APELLIDO_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_PRIMER_APELLIDO IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET PRIMER_APELLIDO = V_PRIMER_APELLIDO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;

      --EDITAR SEGUNDO APELLIDO--
    PROCEDURE USUARIO_EDITAR_SEGUNDO_APELLIDO_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_SEGUNDO_APELLIDO IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET SEGUNDO_APELLIDO = V_SEGUNDO_APELLIDO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;
    
       --EDITAR TELEFONO--
    PROCEDURE USUARIO_EDITAR_TELEFONO_SP(
        V_TELEFONO IN NUMBER,
        V_ID_USUARIO IN NUMBER
    ) AS
    BEGIN 
        UPDATE FIDE_USUARIO_TB
        SET TELEFONO = V_TELEFONO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;

    --Creacion de Cita--
    PROCEDURE CITA_CREACTION_CITA_SP(
    V_ID_USUARIO IN NUMBER,
    V_ID_DOCTOR IN NUMBER,
    V_FECHA IN DATE,
    V_ID_SERVICIO IN VARCHAR2,
    V_HORA IN DATE,
    V_ID_CONSULTORIO IN NUMBER
    ) AS
    BEGIN
        IF V_ID_USUARIO IS NULL OR V_ID_USUARIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL USUARIO ESTA VACÍO');
            RETURN;
        ELSIF V_ID_DOCTOR IS NULL OR V_ID_DOCTOR = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL DOCTOR ESTA VACÍO');
            RETURN;
        ELSIF V_FECHA IS NULL OR V_FECHA = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('LA FECHA ESTA VACÍA');
            RETURN;
        ELSIF V_ID_SERVICIO IS NULL OR V_ID_SERVICIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL SERVICIO ESTA VACÍO');
            RETURN;
        ELSIF V_HORA IS NULL OR V_HORA = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('LA HORA ESTA VACÍA');
            RETURN;
        ELSIF V_ID_CONSULTORIO IS NULL OR V_ID_CONSULTORIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL CONSULTORIO ESTA VACÍO');
            RETURN;
        END IF;    
    INSERT INTO FIDE_CITAS_TB
        (ID_USUARIO, ID_DOCTOR, FECHA, ID_SERVICIO, HORA, ID_CONSULTORIO)
    VALUES
        (V_ID_USUARIO, V_ID_DOCTOR, V_FECHA, V_ID_SERVICIO, V_HORA, V_ID_CONSULTORIO);
        
    DBMS_OUTPUT.PUT_LINE('CITA REGISTRADO EXITOSAMENTE');
    END;
  
    --Editar Fecha de Cita--
    PROCEDURE CITA_EDITAR_FECHA_SP(
    V_FECHA IN DATE,
    V_ID_CITA IN NUMBER
    ) AS 
    BEGIN 
        UPDATE FIDE_CITAS_TB
        SET FECHA = V_FECHA
        WHERE ID_CITA = V_ID_CITA;
    END;
    
    --Editar Doctor de la Cita-- 
    PROCEDURE CITA_EDITAR_DOCTOR_SP(
    V_ID_DOCTOR IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_DOCTOR = V_ID_DOCTOR
        WHERE ID_CITA = V_ID_CITA;
    END;
    
        --Editar Doctor de la Cita-- 
    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(
    V_ID_CONSULTORIO IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_CONSULTORIO = V_ID_CONSULTORIO
        WHERE ID_CITA = V_ID_CITA;
    END;

    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(
    V_ID_SERVICIO IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_SERVICIO = V_ID_SERVICIO
        WHERE ID_CITA = V_ID_CITA;
    END;    
 
