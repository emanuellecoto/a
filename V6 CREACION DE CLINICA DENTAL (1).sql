---CREACION DE USUARIOS---
CREATE USER Emanuel IDENTIFIED by ema; --AQUI CAMBIAS A TU USER
GRANT CONNECT, RESOURCE TO Emanuel; -- PRIVILEGIOS DE CONEXION 
GRANT CREATE SESSION TO Emanuel -- PRIVILEGIOS DE CREAR SESSIONES
GRANT ALL PRIVILEGES TO Emanuel; -- PRIVILEGIOS TOTALES 



---CREACION DE ROLES---

CREATE ROLE ADMIN_ROLE;
CREATE ROLE MEDICO;
CREATE ROLE RECEPCIONISTA;
CREATE ROLE CLIENTE;



---TABLAS---

--Tabla de Encriptado
CREATE TABLE claves_encriptacion (
    id NUMBER PRIMARY KEY,
    clave RAW(32)
);

INSERT INTO claves_encriptacion (id, clave)
VALUES (1, UTL_RAW.CAST_TO_RAW('12345678901234567890123456789012')); -- Ejemplo de clave de 32 caracteres
COMMIT;

CREATE TABLE empleados_salario (
    id NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    salario RAW(2000)
);

-- Tabla de Usuarios
CREATE TABLE FIDE_USUARIO_TB (
  ID_USUARIO NUMBER CONSTRAINT USUARIO_ID_USUARIO_PK  PRIMARY KEY, 
  NOMBRE VARCHAR2(50),
  PRIMER_APELLIDO VARCHAR2(50), 
  SEGUNDO_APELLIDO VARCHAR2(50),
  EMAIL VARCHAR2(200) CONSTRAINT USUARIO_EMAIL_UQ  UNIQUE, 
  TELEFONO NUMBER, 
  ID_ROLE NUMBER, 
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT USUARIO_ID_ROLE_FK
    FOREIGN KEY(ID_ROLE)
    REFERENCES FIDE_ROLE_TB(ID_ROLE),
    
    CONSTRAINT USUARIO_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);

-- Tabla de Doctores
CREATE TABLE FIDE_DOCTORES_TB (
  ID_DOCTOR NUMBER CONSTRAINT DOCTORES_ID_DOCTOR_PK PRIMARY KEY, 
  ID_USUARIO NUMBER,
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
  CONSTRAINT DOC_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
    
  CONSTRAINT DOC_ID_USUARIO_FK 
    FOREIGN KEY(ID_USUARIO)
    REFERENCES FIDE_USUARIO_TB(ID_USUARIO)
);



-- Tabla de Estados
CREATE TABLE FIDE_ESTADO_TB (
  ID_ESTADO VARCHAR2(1) CONSTRAINT ESTADO_ID_ESTADO_PK PRIMARY KEY,
  DESCRIPCION VARCHAR2(1),
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100)
);


-- Tabla de Roles
CREATE TABLE FIDE_ROLE_TB (
  ID_ROLE NUMBER CONSTRAINT ROLE_ID_ROLE_PK  PRIMARY KEY, 
  DESCRIPCION VARCHAR2(100),
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT ROLE_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);



-- Tabla de Almacén
CREATE TABLE FIDE_ALMACEN_TB (
  ID_UBICACION NUMBER CONSTRAINT ALMACEN_ID_UBICACION_PK PRIMARY KEY, 
  PISO VARCHAR2(10),
  HILERA VARCHAR2(10),
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT ALMACEN_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);


-- Tabla de Servicios
CREATE TABLE FIDE_SERVICIOS_TB (
  ID_SERVICIO NUMBER CONSTRAINT SERVICIOS_ID_SERVICIO_PK PRIMARY KEY,
  DESCRIPCION VARCHAR2(100), 
  COSTO NUMBER, 
  ID_DOCTOR NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
  CONSTRAINT SERVICIOS_ID_DOCTOR_FK
  FOREIGN KEY(ID_DOCTOR)
  REFERENCES FIDE_DOCTORES_TB(ID_DOCTOR)
);


-- Tabla de Consultorios
CREATE TABLE FIDE_CONSULTORIO_TB (
  ID_CONSULTORIO NUMBER CONSTRAINT CONSULTORIO_ID_CONSULTORIO_PK PRIMARY KEY, 
  ID_SERVICIO NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT CONSULTORIO_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
    
    CONSTRAINT CONSULTORIO_ID_SERVICIO_FK
    FOREIGN KEY(ID_SERVICIO)
    REFERENCES FIDE_SERVICIOS_TB(ID_SERVICIO)
);

-- Tabla de Inventario
CREATE TABLE FIDE_INVENTARIO_TB (
  ID_PRODUCTO NUMBER CONSTRAINT INVENTARIO_ID_PRODUCTO_PK PRIMARY KEY, 
  ID_PROVEEDOR NUMBER,
  DESCRIPCION VARCHAR2(50),
  FECHA_INGRESO DATE, 
  FECHA_CADUCIDAD DATE, 
  CANTIDAD NUMBER, 
  ID_ALMACEN NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
  CONSTRAINT INVENTARIO_ID_PROVEEDOR
  FOREIGN KEY(ID_PROVEEDOR)
  REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR),
  
    CONSTRAINT INVENTARIO_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
  
  CONSTRAINT INVENTARIO_ID_ALMACEN_FK
  FOREIGN KEY(ID_ALMACEN)
  REFERENCES FIDE_ALMACEN_TB(ID_UBICACION)
  
);

-- Tabla de Recetas
CREATE TABLE FIDE_RECETAS_TB (
  ID_RECETA NUMBER CONSTRAINT RECETAS_ID_RECETA_PK PRIMARY KEY,
  ID_USUARIO NUMBER, 
  ID_DOCTOR NUMBER, 
  ID_PRODUCTO NUMBER, 
  FECHA DATE, 
  DOSIS VARCHAR2(50), 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
  CONSTRAINT RECETAS_ID_USUARIO_FK
  FOREIGN KEY(ID_USUARIO)
  REFERENCES FIDE_USUARIO_TB,
  
  CONSTRAINT RECETAS_ID_MEDICO_FK
  FOREIGN KEY(ID_DOCTOR)
  REFERENCES FIDE_DOCTORES_TB(ID_DOCTOR),
  
  CONSTRAINT RECETAS_ID_PRODUCTO_FK
  FOREIGN KEY(ID_PRODUCTO)
  REFERENCES FIDE_INVENTARIO_TB(ID_PRODUCTO),

  
    CONSTRAINT RECETAS_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);

-- Tabla de Detalles de Factura
CREATE TABLE FIDE_DETALLE_TB (
  ID_DETALLE NUMBER CONSTRAINT DETALLE_ID_DETALLE_PK PRIMARY KEY, 

  ID_DOCTOR NUMBER, 
  ID_PRODUCTO NUMBER,
  CANTIDAD NUMBER, 
  PRECIO_UNITARIO NUMBER, 
  SUBTOTAL NUMBER, 
  TOTAL NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  

  
  CONSTRAINT DETALLE_ID_DOCTOR_FK
  FOREIGN KEY(ID_DOCTOR)
  REFERENCES FIDE_DOCTORES_TB(ID_DOCTOR), 
  
  CONSTRAINT DETALLE_ID_PRODUCTO_FK
  FOREIGN KEY(ID_PRODUCTO)
  REFERENCES FIDE_INVENTARIO_TB(ID_PRODUCTO),
  
    CONSTRAINT DETALLE_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
  
);

-- Tabla de Facturas
CREATE TABLE FIDE_FACTURA_TB (
  ID_FACTURA NUMBER CONSTRAINT FACTURA_ID_FACTURA_PK PRIMARY KEY, 
  ID_USUARIO NUMBER, 
  ID_DOCTOR NUMBER,
  FECHA DATE, 
  ID_METODO_PAGO NUMBER, 
  COSTO_TOTAL NUMBER, 
  ID_CITA NUMBER, 
  ID_PRODUCTO NUMBER, 
  ID_DETALLE NUMBER,
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
  CONSTRAINT FACTURA_ID_USUARIO_FK
  FOREIGN KEY (ID_USUARIO)
  REFERENCES FIDE_USUARIO_TB(ID_USUARIO),
  
  CONSTRAINT FACTURA_ID_DOCTOR_FK
  FOREIGN KEY (ID_DOCTOR)
  REFERENCES FIDE_DOCTORES_TB(ID_DOCTOR),
  
  CONSTRAINT FACTURA_ID_METODO_FK
  FOREIGN KEY (ID_METODO_PAGO)
  REFERENCES FIDE_METODO_PAGO_TB(ID_METODO),
  
  CONSTRAINT FACTURA_ID_CITA_FK
  FOREIGN KEY (ID_CITA)
  REFERENCES FIDE_CITAS_TB(ID_CITA),
  
  CONSTRAINT FACTURA_ID_PRODUCTO_FK
  FOREIGN KEY (ID_PRODUCTO)
  REFERENCES FIDE_INVENTARIO_TB(ID_PRODUCTO),

  CONSTRAINT FACTURA_ID_DETALLE_FK
  FOREIGN KEY (ID_DETALLE)
  REFERENCES FIDE_DETALLE_TB(ID_DETALLE),
  
    CONSTRAINT FACTURA_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);



-- Tabla de Citas
CREATE TABLE FIDE_CITAS_TB (
  ID_CITA NUMBER CONSTRAINT CITAS_ID_CITA_PK  PRIMARY KEY, 
  ID_USUARIO NUMBER, 
  ID_DOCTOR NUMBER, 
  FECHA DATE, 
  ID_SERVICIO NUMBER, 
    HORA VARCHAR2(10),
  ID_CONSULTORIO NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),

  
  CONSTRAINT CITA_ID_USUARIO_FK
  FOREIGN KEY (ID_USUARIO)
  REFERENCES FIDE_USUARIO_TB(ID_USUARIO),
  
  CONSTRAINT CITA_ID_DOCTOR_FK
  FOREIGN KEY (ID_DOCTOR)
  REFERENCES FIDE_DOCTORES_TB(ID_DOCTOR),
  
    CONSTRAINT CITA_ID_SERVICIO_FK
    FOREIGN KEY(ID_SERVICIO)
    REFERENCES FIDE_SERVICIOS_TB(ID_SERVICIO),
    
    CONSTRAINT CITA_ID_CONSULTORIO_FK
    FOREIGN KEY(ID_CONSULTORIO)
    REFERENCES FIDE_CONSULTORIO_TB(ID_CONSULTORIO),
    
    CONSTRAINT CITA_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);

-- Tabla de Métodos de Pago
CREATE TABLE FIDE_METODO_PAGO_TB (
  ID_METODO NUMBER CONSTRAINT METODO_PAGO_ID_METODO_PK PRIMARY KEY,
  METODO_PAGO VARCHAR2(50),
  ID_ENTIDAD_BANCARIA NUMBER,
  N_TARJETA NUMBER, 
  CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT METODO_PAGO_ID_ESTADO_FK_
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO), 
    
    CONSTRAINT METODO_PAGO_ID_ENTIDAD_BANCARIA_FK_
    FOREIGN KEY(ID_ENTIDAD_BANCARIA)
    REFERENCES FIDE_ENTIDAD_BANCARIA_TB(ID_ENTIDAD_BANCARIA)
);

-- Tabla de Entidades Bancarias
CREATE TABLE FIDE_ENTIDAD_BANCARIA_TB (
  ID_ENTIDAD_BANCARIA NUMBER CONSTRAINT ENTIDAD_BANCARIA_ID_METODO_PK PRIMARY KEY,
  NOMBRE VARCHAR2(40),
    CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR(1),
  
      CONSTRAINT ENTIDAD_BANCARIA_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
  
);

-- Tabla de Proveedores
CREATE TABLE FIDE_PROVEEDORES_TB (
  ID_PROVEEDOR NUMBER CONSTRAINT PROVEEDORES_ID_PROVEEDOR PRIMARY KEY, 
  NOMBRE_PROVEEDOR VARCHAR2(50), 
  EMAIL VARCHAR2(100) UNIQUE,
  TELEFONO NUMBER,
  ID_DISTRITO NUMBER, 
  ID_CANTON NUMBER, 
  ID_PROVINCIA NUMBER, 
    CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT PROVEEDORES_ID_DISTRITO_FK
    FOREIGN KEY(ID_DISTRITO)
    REFERENCES FIDE_DISTRITO_TB(ID_DISTRITO),
    
    CONSTRAINT PROVEEDORES_ID_CANTON_FK
    FOREIGN KEY(ID_CANTON)
    REFERENCES FIDE_CANTON_TB(ID_CANTON),
    
          CONSTRAINT PROVEEDORES_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
    
    CONSTRAINT PROVEEDORES_ID_PROVINCIA_FK
    FOREIGN KEY(ID_PROVINCIA)
    REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA)
);

-- Tabla de Distritos
CREATE TABLE FIDE_DISTRITO_TB (
  ID_DISTRITO NUMBER CONSTRAINT DISTRITO_ID_DISTRITO  PRIMARY KEY, 
  NOMBRE VARCHAR2(50),
  ID_CANTON NUMBER,
      CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT DISTRITO_ID_CANTON_FK
    FOREIGN KEY(ID_CANTON)
    REFERENCES FIDE_CANTON_TB(ID_CANTON),
    
          CONSTRAINT DISTRITO_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);

-- Tabla de Cantones
CREATE TABLE  FIDE_CANTON_TB (
  ID_CANTON NUMBER CONSTRAINT CANTON_ID_CANTON PRIMARY KEY,
  NOMBRE VARCHAR2(30), 
  ID_PROVINCIA NUMBER,
      CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
    CONSTRAINT CANTON_ID_PROVINCIA_FK
    FOREIGN KEY(ID_PROVINCIA)
    REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA),
    
              CONSTRAINT CANTON_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);

-- Tabla de Provincias
CREATE TABLE FIDE_PROVINCIA_TB (
  ID_PROVINCIA NUMBER CONSTRAINT PROVINCIA_ID_PROVINCIA_PK PRIMARY KEY, 
  NOMBRE VARCHAR2(50),
      CREADO_POR VARCHAR2(100),
FECHA_CREACION TIMESTAMP,
MODIFICADO_POR VARCHAR2(100),
FECHA_MODIFICACION TIMESTAMP,
ACCION VARCHAR2(100),
  ID_ESTADO VARCHAR2(1),
  
                CONSTRAINT PROVINCIA_ID_ESTADO_FK
    FOREIGN KEY(ID_ESTADO)
    REFERENCES FIDE_ESTADO_TB(ID_ESTADO)
);






-------SECUENCIAS-------------

-----------------
------ALMACEN-------
CREATE SEQUENCE FIDE_ALMACEN_SQ
START WITH 1
INCREMENT BY 1;


-----------------
------USUARIO-------
CREATE SEQUENCE FIDE_USUARIO_SQ
START WITH 1
INCREMENT BY 1;



-----------------
------DOCTORES-------
CREATE SEQUENCE FIDE_DOCTORES_SQ
START WITH 1
INCREMENT BY 1;


-----------------
------CITA-------
CREATE SEQUENCE DENT_CITAS_SQ
START WITH 1
INCREMENT BY 1;

-----------------
------SERVICIOS-------
CREATE SEQUENCE DENT_SERVICIOS_SQ
START WITH 1
INCREMENT BY 1;


-----------------
------SERVICIOS-------
CREATE SEQUENCE FIDE_CONSULTORIO_SQ
START WITH 1
INCREMENT BY 1;


-----------------
------ENTIDAD BANCARIA-------
CREATE SEQUENCE FIDE_ENTIDAD_SQ
START WITH 1
INCREMENT BY 1;


-----------------
------ENTIDAD BANCARIA-------
CREATE SEQUENCE FIDE_PROVINCIA_SQ
START WITH 1
INCREMENT BY 1;


-----------------

------INVENTARIO-------
CREATE SEQUENCE FIDE_INVENTARIO_SQ
START WITH 1
INCREMENT BY 1;


-----------------

------RECETAS-------
CREATE SEQUENCE FIDE_RECETAS_SQ
START WITH 1
INCREMENT BY 1;


-----------------

------DETALLE FACTURA-------
CREATE SEQUENCE FIDE_DETALLE_SQ
START WITH 1
INCREMENT BY 1;


-----------------

------FACTURAS-------
CREATE SEQUENCE FIDE_FACTURA_SQ
START WITH 1
INCREMENT BY 1;


-----------------



---TRIGGERS---

--ALMACEN--
CREATE OR REPLACE TRIGGER  FIDE_ALMANCEN_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_ALMACEN_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;


--CANTON--
CREATE OR REPLACE TRIGGER  FIDE_CANTON_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_CANTON_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--CITAS--
CREATE OR REPLACE TRIGGER  FIDE_CITAS_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_CITAS_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;


--CONSULTORIO--
CREATE OR REPLACE TRIGGER  FIDE_CONSULTORIO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_CONSULTORIO_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--DETALLE--
CREATE OR REPLACE TRIGGER  FIDE_DETALLE_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_DETALLE_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--DISTRITO--
CREATE OR REPLACE TRIGGER  FIDE_DISTRITO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_DISTRITO_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--DOCTORES--
CREATE OR REPLACE TRIGGER  FIDE_DOCTORES_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_DOCTORES_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_DOCTORES_ID_DOCTOR_SECUENCIA_TRG
BEFORE INSERT ON FIDE_DOCTORES_TB
FOR EACH ROW 
BEGIN
    :NEW.ID_DOCTOR :=FIDE_DOCTORES_SQ.NEXTVAL;
END;



CREATE OR REPLACE TRIGGER FIDE_DOCTORES_AGREGAR_DOCTOR_TRG
AFTER INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
DECLARE
    V_ID_ROLE_CONTADOR NUMBER;

BEGIN

        IF :NEW.ID_ROLE = 4 THEN
        
            SELECT COUNT(*) INTO V_ID_ROLE_CONTADOR FROM FIDE_DOCTORES_TB
            WHERE ID_USUARIO = :NEW.ID_USUARIO;
            
            IF V_ID_ROLE_CONTADOR = 0 THEN
            
                INSERT INTO FIDE_DOCTORES_TB (ID_USUARIO,CREADO_POR,
                FECHA_CREACION,MODIFICADO_POR,FECHA_MODIFICACION,ACCION,ID_ESTADO) 
                VALUES (:NEW.ID_USUARIO, :NEW.CREADO_POR,
                :NEW.FECHA_CREACION,:NEW.MODIFICADO_POR,:NEW.FECHA_MODIFICACION,:NEW.ACCION,:NEW.ID_ESTADO);
            
            
            ELSE
                UPDATE FIDE_DOCTORES_TB
                SET ID_ESTADO = 'A'
                WHERE ID_USUARIO = :NEW.ID_USUARIO;
            END IF;
        ELSE
            UPDATE FIDE_DOCTORES_TB
            SET ID_ESTADO = 'I'
            WHERE ID_USUARIO = :NEW.ID_USUARIO;
        
                
        END IF;
         
END;


--ENTIDAD BANCARIA--
CREATE OR REPLACE TRIGGER  FIDE_ENTIDAD_BANCARIA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_ENTIDAD_BANCARIA_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--ESTADO--
CREATE OR REPLACE TRIGGER  FIDE_ESTADO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_ESTADO_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ESTADO_FECHA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;


--FACTURA--
CREATE OR REPLACE TRIGGER  FIDE_FACTURA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_FACTURA_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--INVENTARIO--
CREATE OR REPLACE TRIGGER  FIDE_INVENTARIO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_INVENTARIO_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--METODO PAGO--
CREATE OR REPLACE TRIGGER  FIDE_METODO_PAGO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_METODO_PAGO_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--PROVEEDORES--
CREATE OR REPLACE TRIGGER  FIDE_PROVEEDORES_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_PROVEEDORES_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--PROVINCIA--
CREATE OR REPLACE TRIGGER  FIDE_PROVINCIA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_PROVINCIA_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--RECETAS--
CREATE OR REPLACE TRIGGER  FIDE_RECETAS_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_RECETAS_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

--ROLE--
CREATE OR REPLACE TRIGGER  FIDE_ROLE_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_ROLE_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ROLE_FECHA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_ROLE_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_ROLE_ID_ESTADO_TRG
BEFORE INSERT ON FIDE_ROLE_TB
FOR EACH ROW
BEGIN
        :NEW.ID_ESTADO := 'A';
        

END;


--SERVICIOS--
CREATE OR REPLACE TRIGGER  FIDE_SERVICIOS_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_SERVICIOS_TB
FOR EACH ROW 
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_SERVICIOS_FECHA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_SERVICIOS_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;


--USUARIO--
CREATE OR REPLACE TRIGGER  FIDE_USUARIO_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON  FIDE_USUARIO_TB
FOR EACH ROW     
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR:= USER;
    ELSE
        :NEW.MODIFICADO_POR:=USER;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_FECHA_CREADO_MODIFICADO_POR_TRG
BEFORE INSERT OR UPDATE ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.FECHA_CREACION := SYSTIMESTAMP;
    ELSE
        :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_ID_USUARIO_SECUENCIA_TRG
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW 
BEGIN
    :NEW.ID_USUARIO :=FIDE_USUARIO_SQ.NEXTVAL;
END;


CREATE OR REPLACE TRIGGER FIDE_USUARIO_ASIGNAR_ROLE_TRG
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
    IF :NEW.ID_ROLE IS NULL THEN 
    :NEW.ID_ROLE := 1;
    END IF;
END;

CREATE OR REPLACE TRIGGER FIDE_USUARIO_ID_ESTADO_TRG
BEFORE INSERT ON FIDE_USUARIO_TB
FOR EACH ROW
BEGIN
        :NEW.ID_ESTADO := 'A';
        
END;
-- Vista: Usuarios con roles y estados
CREATE OR REPLACE VIEW FIDE_USUARIOS_ROLES_ESTADOS_V AS
SELECT 
    U.ID_USUARIO, 
    U.NOMBRE, 
    U.EMAIL, 
    R.DESCRIPCION AS ROL, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_USUARIO_TB U
JOIN 
    FIDE_ROLE_TB R ON U.ID_ROLE = R.ID_ROLE
JOIN 
    FIDE_ESTADO_TB E ON U.ID_ESTADO = E.ID_ESTADO;

-- Vista: Doctores con servicios y estados
CREATE OR REPLACE VIEW FIDE_DOCTORES_SERVICIOS_ESTADOS_V AS
SELECT 
    D.ID_DOCTOR, 
    U.NOMBRE AS NOMBRE_DOCTOR, 
    D.SERVICIO, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_DOCTORES_TB D
JOIN 
    FIDE_USUARIO_TB U ON D.ID_USUARIO = U.ID_USUARIO
JOIN 
    FIDE_ESTADO_TB E ON D.ID_ESTADO = E.ID_ESTADO;

-- Vista: Inventario por almacén con estado
CREATE OR REPLACE VIEW FIDE_INVENTARIO_ALMACEN_V AS
SELECT 
    A.ID_UBICACION, 
    A.PISO, 
    A.HILERA, 
    COUNT(I.ID_PRODUCTO) AS TOTAL_PRODUCTOS, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_ALMACEN_TB A
LEFT JOIN 
    FIDE_INVENTARIO_TB I ON A.ID_UBICACION = I.ID_ALMACEN
JOIN 
    FIDE_ESTADO_TB E ON A.ID_ESTADO = E.ID_ESTADO
GROUP BY 
    A.ID_UBICACION, A.PISO, A.HILERA, E.DESCRIPCION;

-- Vista: Servicios con doctores y estados
CREATE OR REPLACE VIEW FIDE_SERVICIOS_DOCTORES_ESTADOS_V AS
SELECT 
    S.ID_SERVICIO, 
    S.DESCRIPCION AS SERVICIO, 
    S.COSTO, 
    U.NOMBRE AS DOCTOR, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_SERVICIOS_TB S
JOIN 
    FIDE_DOCTORES_TB D ON S.ID_DOCTOR = D.ID_DOCTOR
JOIN 
    FIDE_USUARIO_TB U ON D.ID_USUARIO = U.ID_USUARIO
JOIN 
    FIDE_ESTADO_TB E ON S.ID_ESTADO = E.ID_ESTADO;

-- Vista: Productos próximos a caducar y sus proveedores
CREATE OR REPLACE VIEW FIDE_PRODUCTOS_PROXIMOS_CADUCAR_PROVEEDORES_V AS
SELECT 
    I.ID_PRODUCTO, 
    I.DESCRIPCION, 
    I.FECHA_CADUCIDAD, 
    P.NOMBRE_PROVEEDOR, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_INVENTARIO_TB I
JOIN 
    FIDE_PROVEEDORES_TB P ON I.ID_PROVEEDOR = P.ID_PROVEEDOR
JOIN 
    FIDE_ESTADO_TB E ON I.ID_ESTADO = E.ID_ESTADO
WHERE 
    I.FECHA_CADUCIDAD <= SYSDATE + 30;

-- Vista: Facturas pendientes con clientes y doctores
CREATE OR REPLACE VIEW FIDE_FACTURAS_PENDIENTES_CLIENTES_DOCTORES_V AS
SELECT 
    F.ID_FACTURA, 
    U.NOMBRE AS CLIENTE, 
    D.NOMBRE AS DOCTOR, 
    F.FECHA, 
    F.COSTO_TOTAL
FROM 
    FIDE_FACTURA_TB F
JOIN 
    FIDE_USUARIO_TB U ON F.ID_USUARIO = U.ID_USUARIO
LEFT JOIN 
    FIDE_DOCTORES_TB DO ON F.ID_DOCTOR = DO.ID_DOCTOR
JOIN 
    FIDE_ESTADO_TB E ON F.ID_ESTADO = E.ID_ESTADO
WHERE 
    E.DESCRIPCION = 'Pendiente';

-- Vista: Citas con servicios y consultorios
CREATE OR REPLACE VIEW FIDE_CITAS_SERVICIOS_CONSULTORIOS_V AS
SELECT 
    C.ID_CITA, 
    U.NOMBRE AS CLIENTE, 
    S.DESCRIPCION AS SERVICIO, 
    CO.HILERA AS CONSULTORIO, 
    C.FECHA, 
    C.HORA, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_CITAS_TB C
JOIN 
    FIDE_USUARIO_TB U ON C.ID_USUARIO = U.ID_USUARIO
JOIN 
    FIDE_SERVICIOS_TB S ON C.ID_SERVICIO = S.ID_SERVICIO
LEFT JOIN 
    FIDE_CONSULTORIO_TB CO ON C.ID_CONSULTORIO = CO.ID_CONSULTORIO
JOIN 
    FIDE_ESTADO_TB E ON C.ID_ESTADO = E.ID_ESTADO;

-- Vista: Proveedores con productos y su estado
CREATE OR REPLACE VIEW FIDE_PROVEEDORES_PRODUCTOS_ESTADOS_V AS
SELECT 
    P.ID_PROVEEDOR, 
    P.NOMBRE_PROVEEDOR, 
    COUNT(I.ID_PRODUCTO) AS TOTAL_PRODUCTOS, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_PROVEEDORES_TB P
LEFT JOIN 
    FIDE_INVENTARIO_TB I ON P.ID_PROVEEDOR = I.ID_PROVEEDOR
JOIN 
    FIDE_ESTADO_TB E ON P.ID_ESTADO = E.ID_ESTADO
GROUP BY 
    P.ID_PROVEEDOR, P.NOMBRE_PROVEEDOR, E.DESCRIPCION;

-- Vista: Recetas con pacientes y productos
CREATE OR REPLACE VIEW FIDE_RECETAS_PACIENTES_PRODUCTOS_V AS
SELECT 
    R.ID_RECETA, 
    U.NOMBRE AS PACIENTE, 
    P.DESCRIPCION AS PRODUCTO, 
    R.DOSIS, 
    R.FECHA, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_RECETAS_TB R
JOIN 
    FIDE_USUARIO_TB U ON R.ID_USUARIO = U.ID_USUARIO
JOIN 
    FIDE_INVENTARIO_TB P ON R.ID_PRODUCTO = P.ID_PRODUCTO
JOIN 
    FIDE_ESTADO_TB E ON R.ID_ESTADO = E.ID_ESTADO;

-- Vista: Métodos de pago con facturas asociadas
CREATE OR REPLACE VIEW FIDE_METODOS_PAGO_FACTURAS_V AS
SELECT 
    MP.ID_METODO, 
    MP.METODO_PAGO, 
    COUNT(F.ID_FACTURA) AS TOTAL_FACTURAS, 
    E.DESCRIPCION AS ESTADO
FROM 
    FIDE_METODO_PAGO_TB MP
LEFT JOIN 
    FIDE_FACTURA_TB F ON MP.ID_METODO = F.ID_METODO_PAGO
JOIN 
    FIDE_ESTADO_TB E ON MP.ID_ESTADO = E.ID_ESTADO
GROUP BY 
    MP.ID_METODO, MP.METODO_PAGO, E.DESCRIPCION;

-----------------
