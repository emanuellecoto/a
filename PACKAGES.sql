create or replace PACKAGE  FIDE_CLINICA_DENTAL_PROCEDURES_PKG AS
    PROCEDURE ROLE_INSERTAR_ROLE_SP(V_ID_ROLE IN NUMBER, V_NOMBRE_ROLE IN VARCHAR2);    
    PROCEDURE ESTADO_INSERTAR_ESTADO_SP(V_ID_ESTADO IN NUMBER,V_NOMBRE_ESTADO IN VARCHAR2);
    PROCEDURE USUARIO_OBTENER_REGISTRO_SP(V_NOMBRE IN VARCHAR2, V_PRIMER_APELLIDO IN VARCHAR2, V_SEGUNDO_APELLIDO IN VARCHAR2, V_EMAIL IN VARCHAR2, V_TELEFONO IN NUMBER);
    PROCEDURE USUARIO_EDITAR_NOMBRE_SP(V_ID_USUARIO IN VARCHAR2, V_NOMBRE IN VARCHAR2);
    PROCEDURE USUARIO_EDITAR_PRIMER_APELLIDO_SP(V_ID_USUARIO IN VARCHAR2,V_PRIMER_APELLIDO IN VARCHAR2);
    PROCEDURE USUARIO_EDITAR_SEGUNDO_APELLIDO_SP(V_ID_USUARIO IN VARCHAR2,V_SEGUNDO_APELLIDO IN VARCHAR2);
    PROCEDURE USUARIO_EDITAR_ROLE_SP(V_ID_USUARIO IN VARCHAR2,V_ID_ROLE IN VARCHAR2);
    PROCEDURE USUARIO_EDITAR_TELEFONO_SP(V_TELEFONO IN NUMBER,V_ID_USUARIO IN NUMBER);  
    PROCEDURE CITA_CREACTION_CITA_SP(V_ID_USUARIO IN NUMBER,V_ID_DOCTOR IN NUMBER,V_FECHA IN DATE,V_ID_SERVICIO IN VARCHAR2,V_HORA IN DATE, V_ID_CONSULTORIO IN NUMBER);
    PROCEDURE CITA_EDITAR_FECHA_SP(V_FECHA IN DATE, V_ID_CITA IN NUMBER);
    PROCEDURE CITA_EDITAR_DOCTOR_SP(V_ID_DOCTOR IN NUMBER,V_ID_CITA IN NUMBER);
    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(V_ID_CONSULTORIO IN NUMBER,V_ID_CITA IN NUMBER);
    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(V_ID_SERVICIO IN NUMBER,V_ID_CITA IN NUMBER);
END FIDE_CLINICA_DENTAL_PROCEDURES_PKG;

create or replace PACKAGE BODY FIDE_CLINICA_DENTAL_PROCEDURES_PKG AS

    --Insertar Role--
    PROCEDURE ROLE_INSERTAR_ROLE_SP(
        V_ID_ROLE IN NUMBER,
        V_NOMBRE_ROLE IN VARCHAR2
    ) AS
    BEGIN
        INSERT INTO FIDE_ROLE_TB (ID_ROLE, DESCRIPCION)
        VALUES (V_ID_ROLE, V_NOMBRE_ROLE);
    END ROLE_INSERTAR_ROLE_SP;

    --Insertar Estado--
    PROCEDURE ESTADO_INSERTAR_ESTADO_SP(
    V_ID_ESTADO IN NUMBER,
    V_NOMBRE_ESTADO IN VARCHAR2    
    ) AS
    BEGIN
        INSERT INTO FIDE_ESTADO_TB(ID_ESTADO, DESCRIPCION)
        VALUES(V_ID_ESTADO, V_NOMBRE_ESTADO);
    END;
    
    --Insertar Usuario--
    PROCEDURE USUARIO_OBTENER_REGISTRO_SP(
    V_NOMBRE IN VARCHAR2,
    V_PRIMER_APELLIDO IN VARCHAR2,
    V_SEGUNDO_APELLIDO IN VARCHAR2,
    V_EMAIL IN VARCHAR2,
    V_TELEFONO IN NUMBER
    ) IS
    V_CUENTA_EMAIL NUMBER;
    BEGIN
        IF V_NOMBRE IS NULL OR V_NOMBRE = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL NOMBRE ESTA VACÍO');
            RETURN;
        ELSIF V_PRIMER_APELLIDO IS NULL OR V_PRIMER_APELLIDO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL PRIMER APELLIDO ESTA VACÍO');
            RETURN;
        ELSIF V_SEGUNDO_APELLIDO IS NULL OR V_SEGUNDO_APELLIDO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL SEGUNDO APELLIDO ESTA VACÍO');
            RETURN;
        ELSIF V_EMAIL IS NULL OR V_EMAIL = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL EMAIL ESTA VACÍO');
            RETURN;
        ELSIF V_EMAIL NOT LIKE '%@%' OR V_EMAIL NOT LIKE '%.%' THEN
            DBMS_OUTPUT.PUT_LINE('EL EMAIL NO CONTIENE @ O .');
            RETURN;
        ELSIF V_TELEFONO IS NULL THEN
                DBMS_OUTPUT.PUT_LINE('EL TELEFONO NO CONTIENE VALOR');
            RETURN;
        END IF;
        SELECT COUNT(*) INTO V_CUENTA_EMAIL
        FROM FIDE_USUARIO_TB
        WHERE EMAIL = V_EMAIL;
        IF V_CUENTA_EMAIL > 0 THEN
            DBMS_OUTPUT.PUT_LINE('EL CORREO ELECTRÓNICO YA ESTÁ REGISTRADO');
            RETURN;
        END IF;    
    INSERT INTO FIDE_USUARIO_TB
        (NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, EMAIL, TELEFONO, CREADO_POR)
    VALUES
        (V_NOMBRE, V_PRIMER_APELLIDO, V_SEGUNDO_APELLIDO, V_EMAIL, V_TELEFONO, V_NOMBRE);

    DBMS_OUTPUT.PUT_LINE('USUARIO REGISTRADO EXITOSAMENTE');
    END;
    
    --Editar Nombre--
    PROCEDURE USUARIO_EDITAR_NOMBRE_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_NOMBRE IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET NOMBRE = V_NOMBRE
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;
    
    --EDITAR PRIMER_APELLIDO--
    PROCEDURE USUARIO_EDITAR_PRIMER_APELLIDO_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_PRIMER_APELLIDO IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET PRIMER_APELLIDO = V_PRIMER_APELLIDO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;

      --EDITAR SEGUNDO APELLIDO--
    PROCEDURE USUARIO_EDITAR_SEGUNDO_APELLIDO_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_SEGUNDO_APELLIDO IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET SEGUNDO_APELLIDO = V_SEGUNDO_APELLIDO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;
 
    --EDITAR ROLE--
    PROCEDURE USUARIO_EDITAR_ROLE_SP(
        V_ID_USUARIO IN VARCHAR2,
        V_ID_ROLE IN VARCHAR2
    ) AS 
    BEGIN
        UPDATE FIDE_USUARIO_TB
        SET ID_ROLE = V_ID_ROLE
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;
 
    --EDITAR TELEFONO--
    PROCEDURE USUARIO_EDITAR_TELEFONO_SP(
        V_TELEFONO IN NUMBER,
        V_ID_USUARIO IN NUMBER
    ) AS
    BEGIN 
        UPDATE FIDE_USUARIO_TB
        SET TELEFONO = V_TELEFONO
        WHERE ID_USUARIO = V_ID_USUARIO;
    END;

    --Creacion de Cita--
    PROCEDURE CITA_CREACTION_CITA_SP(
    V_ID_USUARIO IN NUMBER,
    V_ID_DOCTOR IN NUMBER,
    V_FECHA IN DATE,
    V_ID_SERVICIO IN VARCHAR2,
    V_HORA IN DATE,
    V_ID_CONSULTORIO IN NUMBER
    ) AS
    BEGIN
        IF V_ID_USUARIO IS NULL OR V_ID_USUARIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL USUARIO ESTA VACÍO');
            RETURN;
        ELSIF V_ID_DOCTOR IS NULL OR V_ID_DOCTOR = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL DOCTOR ESTA VACÍO');
            RETURN;
        ELSIF V_FECHA IS NULL OR V_FECHA = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('LA FECHA ESTA VACÍA');
            RETURN;
        ELSIF V_ID_SERVICIO IS NULL OR V_ID_SERVICIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL SERVICIO ESTA VACÍO');
            RETURN;
        ELSIF V_HORA IS NULL OR V_HORA = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('LA HORA ESTA VACÍA');
            RETURN;
        ELSIF V_ID_CONSULTORIO IS NULL OR V_ID_CONSULTORIO = ' ' THEN
            DBMS_OUTPUT.PUT_LINE('EL CONSULTORIO ESTA VACÍO');
            RETURN;
        END IF;    
    INSERT INTO FIDE_CITAS_TB
        (ID_USUARIO, ID_DOCTOR, FECHA, ID_SERVICIO, HORA, ID_CONSULTORIO)
    VALUES
        (V_ID_USUARIO, V_ID_DOCTOR, V_FECHA, V_ID_SERVICIO, V_HORA, V_ID_CONSULTORIO);
        
    DBMS_OUTPUT.PUT_LINE('CITA REGISTRADO EXITOSAMENTE');
    END;
  
    --Editar Fecha de Cita--
    PROCEDURE CITA_EDITAR_FECHA_SP(
    V_FECHA IN DATE,
    V_ID_CITA IN NUMBER
    ) AS 
    BEGIN 
        UPDATE FIDE_CITAS_TB
        SET FECHA = V_FECHA
        WHERE ID_CITA = V_ID_CITA;
    END;
    
    --Editar Doctor de la Cita-- 
    PROCEDURE CITA_EDITAR_DOCTOR_SP(
    V_ID_DOCTOR IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_DOCTOR = V_ID_DOCTOR
        WHERE ID_CITA = V_ID_CITA;
    END;
    
        --Editar Doctor de la Cita-- 
    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(
    V_ID_CONSULTORIO IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_CONSULTORIO = V_ID_CONSULTORIO
        WHERE ID_CITA = V_ID_CITA;
    END;

    PROCEDURE CITA_EDITAR_CONSULTORIO_SP(
    V_ID_SERVICIO IN NUMBER,
    V_ID_CITA IN NUMBER
    ) AS
    BEGIN
        UPDATE FIDE_CITAS_TB
        SET ID_SERVICIO = V_ID_SERVICIO
        WHERE ID_CITA = V_ID_CITA;
    END;    
END FIDE_CLINICA_DENTAL_PROCEDURES_PKG;

create or replace PACKAGE FIDE_CLINICA_DENTAL_FUNCTIONS_PKG AS

FUNCTION ID_ALMACEN_SEQ RETURN NUMBER;

FUNCTION ID_USUARIO_SEQ RETURN NUMBER;

FUNCTION ESTADO_RETORNAR_ESTADO_FN(V_ID_USUARIO IN NUMBER) RETURN VARCHAR2;

END;

create or replace PACKAGE BODY FIDE_CLINICA_DENTAL_FUNCTIONS_PKG AS

--FUNCION AUTOINCREMENT ALMACEN--
FUNCTION ID_ALMACEN_SEQ
RETURN NUMBER IS
V_INCREMENT NUMBER;
BEGIN
    V_INCREMENT := FIDE_ALMACEN_SQ.NEXTVAL ;
    RETURN V_INCREMENT;
END ID_ALMACEN_SEQ;

--FUNCION AUTOINCREMENT USUARIO--
FUNCTION ID_USUARIO_SEQ
RETURN NUMBER IS
V_INCREMENT NUMBER;
BEGIN
    V_INCREMENT := FIDE_USUARIO_SQ.NEXTVAL ;
    RETURN V_INCREMENT;
END ID_USUARIO_SEQ;


--FUNCION RETORNAR UN ESTADO I--

FUNCTION ESTADO_RETORNAR_ESTADO_FN(
    V_ID_USUARIO IN NUMBER
) RETURN VARCHAR2 IS 

V_ESTADO_SOLICITADO FIDE_USUARIO_TB.ID_ESTADO%TYPE;
BEGIN

    SELECT ID_ESTADO INTO V_ESTADO_SOLICITADO 
    FROM FIDE_USUARIO_TB 
    WHERE ID_USUARIO = V_ID_USUARIO;
    
    IF V_ESTADO_SOLICITADO = 'A' THEN
        UPDATE FIDE_USUARIO_TB 
        SET ID_ESTADO = 'I'
        WHERE ID_USUARIO = V_ID_USUARIO;
        RETURN 'I';


    ELSIF V_ESTADO_SOLICITADO = 'I' THEN
        UPDATE FIDE_USUARIO_TB 
        SET ID_ESTADO = 'A'
        WHERE ID_USUARIO = V_ID_USUARIO;
        RETURN 'A';
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'NO';
    WHEN OTHERS THEN
        RETURN 'NO';
END ESTADO_RETORNAR_ESTADO_FN;



END;
